
buildscript {

    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.21.0' // gradle dependencyUpdates -Drevision=release
        classpath "de.thetaphi:forbiddenapis:2.6"
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.21.1'
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'project-report' // useful for gradle htmlDependencyReport
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: "de.thetaphi.forbiddenapis"
apply plugin: 'com.github.ben-manes.versions'


repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.bouncycastle:bcprov-jdk15on:1.61'
    compileOnly 'com.auth0:java-jwt:3.8.0'
    compileOnly 'org.apache.commons:commons-lang3:3.9'
    compileOnly 'commons-codec:commons-codec:1.12'
    compileOnly 'com.google.guava:guava:27.1-jre'
    compileOnly 'org.slf4j:slf4j-api:1.7.26'
    testCompile 'org.testng:testng:6.9.6'
    testCompile 'org.assertj:assertj-core:3.12.2'
}

configurations {
    testImplementation.extendsFrom compileOnly
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from(javadoc.destinationDir)
}

group = 'io.inbot'
version = '1.30-SNAPSHOT'
description = 'inbot-utils'
sourceCompatibility = '1.8'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
            artifact(sourcesJar)
            artifact(javadocJar)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useTestNG()
}

forbiddenApis {
    // https://github.com/policeman-tools/forbidden-apis/wiki/GradleUsage
    bundledSignatures = ["jdk-unsafe-9", "jdk-deprecated-9", "jdk-non-portable", "jdk-internal-9"]
    // "jdk-system-out"
    signaturesFiles = files("forbidden_signatures.txt")
    ignoreFailures = false
}

// this intentionally breaks the build if you mess up the formatting; pro tip: use Save Actions plugin in intellij and auto format and organize imports on save
spotless {
    java {
        removeUnusedImports() // removes any unused imports
    }
    // to fix violations: gradle spotlessApply
    // in intellij also tweak kotlin imports to require 999 imports before wildcards and remove java.util for always using wildcards
    // do the same for java imports
    // wildcards are verboten!
    // currentlyb breaks offline build due to fucked up transitive dependency on ktlint & kotlin

}

afterEvaluate {
    // just ffing run it, way to anal to break the build every time
    tasks.getByName('spotlessCheck').dependsOn(tasks.getByName('spotlessApply'))
}